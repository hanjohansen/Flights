@using Flights.Domain.Models
@using Flights.Client.Shared.Game;
@using Flights.Domain.Entities.Game

@inject NavigationManager NavigationManager

<div>
    <div class="grid grid-cols-3 gap-2 pt-2 px-2">
        @for(var i = 15; i <= 20; i++){
            <div>
                <ScoreButton Number="@i" ReportScore="@ReportScore"/>
            </div>
        }

        <BullsButton SelectedModifier="@SelectedModifier" ReportScore="@ReportScore"/>
        <ScoreButton Caption="Miss" Number="0" ReportScore="@ReportNullDart"/>
    </div>
    <div class="px-2 pt-6">        
        <ModifierButton Target="DartModifier.Double"
                        Selected="@SelectedModifier"
                        ModifierChanged="@ModifierChanged"/>
        <ModifierButton Target="DartModifier.Triple"
                        Selected="@SelectedModifier"
                        ModifierChanged="@ModifierChanged"/>
    </div>
    <div class="mx-2 pt-[70px]">
        <AirhornButton MenuPosX="690" MenuPosY="210"/>
    </div>
    <div class="grid grid-cols-2 gap-2 m-2 mt-9 h-[80px]">
        <div class="">
            <RevertButton/>
        </div>      
        <div class="rounded bg-red-500 text-center cursor-pointer pt-[22px] mud-elevation-5"
            @onclick="GoToGames">
            <MudIcon Icon="@Icons.Material.Outlined.Close" Size="Size.Large" Color="Color.Default"/>
        </div>      
    </div>
</div>

@code{
    [CascadingParameter]
    public required GameControls Controls { get; set; }

    private DartModifier SelectedModifier {get;set;} = DartModifier.None;

    private void ModifierChanged(DartModifier modifier){
        if(SelectedModifier == modifier){
            SelectedModifier = DartModifier.None;
            return;
        }
        
        SelectedModifier = modifier;
    }

    private async Task ReportScore(int score)
    {
        if (Controls.ReportScore == null)
            return;
        
        await Controls.ReportScore(StatModel.Init(SelectedModifier, score));
        SelectedModifier = DartModifier.None;
    }

    private async Task ReportNullDart(int score){
        if (Controls.ReportNullDart == null)
            return;
        
        await Controls.ReportNullDart();
        SelectedModifier = DartModifier.None;
    }

    private void GoToGames(){
        if (Controls.CurrentGame.TournamentId != null)
            NavigationManager.NavigateTo("/tournament/" + Controls.CurrentGame.TournamentId);
        else
            NavigationManager.NavigateTo("/games");
    }
}