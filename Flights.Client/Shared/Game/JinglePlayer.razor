@using Flights.Domain.Entities
@using Flights.Domain.Exception
@using Flights.Infrastructure.Port

@inject ISnackbar Snackbar;
@inject IPlayerFileRepository PlayerFileRepo;
@inject IJSRuntime JsRuntime;

<div>
    @foreach (var file in _playerFiles)
    {
        <audio id="audio-@file.PlayerId.ToString()" src="@file.StoragePath" preload="auto"></audio>
    }
</div>  

@code{

    [Parameter]
    public Guid GameId { get; set; }

    private List<PlayerFileEntity> _playerFiles = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPlayerJingleFiles();
    }

    private async Task LoadPlayerJingleFiles()
    {
        try
        {            
            var jingleFiles = await PlayerFileRepo.GetPlayerJinglesByGame(GameId);
            
            _playerFiles.Clear();
            _playerFiles.AddRange(jingleFiles);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }catch(Exception e){
            Snackbar.Add("Weird unexpected error occured: " + e.Message, Severity.Error);
        }
    }
    
    public async Task PlayJingle(Guid playerId)
    {
        if(_playerFiles.All(x => x.PlayerId != playerId))
            return;
        
        await JsRuntime.InvokeVoidAsync("restart", "audio-" + playerId);
    }
}