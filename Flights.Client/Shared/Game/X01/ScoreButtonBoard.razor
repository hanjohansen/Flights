@using Flights.Domain.Models
@using Flights.Client.Shared.Game;
@using Flights.Domain.Entities.Game

@inject NavigationManager NavigationManager

<div class="rounded-md border border-gray-300 mud-elevation-3 bg-white">

    <div class="grid grid-cols-5 gap-2 pt-2 px-2">
        @for(var i = 1; i <= 20; i++){
            <div>
                <ScoreButton Number="@i" ReportScore="@ReportScore"/>
            </div>
        }
        <ScoreButton Number="26" Disabled="@(SelectedModifier != DartModifier.None || GetOpenDartsCount() != 3)" ReportScore="@ReportScore">
            <MudIcon Icon="@Icons.Material.Filled.LocalLaundryService" Size="@Size.Large"/>
        </ScoreButton>
        <BullsButton SelectedModifier="@SelectedModifier" ReportScore="@ReportScore"/>
        <ScoreButton Number="0" ReportScore="@ReportScore"/>
        <ScoreButton Caption="Miss" Number="0" ReportScore="@ReportNullDart"/>
    </div>
    <div class="grid grid-cols-2 gap-3 px-2">
        <ModifierButton Target="DartModifier.Double"
                        Selected="@SelectedModifier"
                        ModifierChanged="@ModifierChanged"/>
        <ModifierButton Target="DartModifier.Triple"
                        Selected="@SelectedModifier"
                        ModifierChanged="@ModifierChanged"/>
    </div>
    <div class="grid grid-cols-5 gap-3 px-2 mt-6">
        <div></div>
        <div class="col-span-3">
            <AirhornButton MenuPosX="605" MenuPosY="220"/>
        </div>
    </div>
    <div class="grid grid-cols-5 gap-3 m-2 mt-[27px] h-[80px]">
        <div class="col-span-3">
            <RevertButton ShowUndoOptions="true"/>
        </div>      
        <div class="col-span-2 rounded bg-red-500 mud-elevation-5 text-center cursor-pointer pt-[22px]"
            @onclick="GoToGames">
            <MudIcon Icon="@Icons.Material.Outlined.Close" Size="Size.Large" Color="Color.Default"/>
        </div>      
    </div>
</div>

@code{
    [CascadingParameter]
    public required GameControls Controls { get; set; }

    private DartModifier SelectedModifier {get;set;} = DartModifier.None;

    private void ModifierChanged(DartModifier modifier){
        if(SelectedModifier == modifier){
            SelectedModifier = DartModifier.None;
            return;
        }
        
        SelectedModifier = modifier;
    }

    private async Task ReportScore(int score)
    {
        if (Controls.ReportScore == null)
            return;

        await Controls.ReportScore(StatModel.Init(SelectedModifier, score));

        SelectedModifier = DartModifier.None;
    }

    private async Task ReportNullDart(int score){
        if (Controls.ReportNullDart == null)
            return;
        
        await Controls.ReportNullDart();
    }

    private void GoToGames(){
        if (Controls.CurrentGame.TournamentId != null)
            NavigationManager.NavigateTo("/tournament/" + Controls.CurrentGame.TournamentId);
        else
            NavigationManager.NavigateTo("/games");
    }
    
    private int GetOpenDartsCount(){
        if(Controls.CurrentGame.CurrentPlayerId == null)
            return 3;

        var currentGame = Controls.CurrentGame;
        var currentPlayer = currentGame.PlayerStates.First(x => x.PlayerId == currentGame.CurrentPlayerId);
        var darts = currentPlayer.Darts;

        if(darts == null)
            return 3;

        var dartsThrown = darts.GetDartsList().Count;

        return 3 - dartsThrown;
    }
}