@using Flights.Client.Service.Port
@using Flights.Domain.Exceptions
@using Flights.Infrastructure.Port
@using Flights.Domain.Entities

@inject ISnackbar Snackbar
@inject IPlayerFileRepository PlayerFileRepo
@inject IJingleFileUploadService JingleFileService

@if (PlayerJingleFile == null)
{
    <div>
        <MudFileUpload T="IBrowserFile" Accept=".mp3, .MP3" FilesChanged="UploadJingle">
            <ActivatorContent>
                <MudFab Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.MusicNote"
                        Label="Upload jingle" />
            </ActivatorContent>
        </MudFileUpload>
    </div>
}
else
{
    <div>
        <div class="flex flex-row">
            <div class="pt-2">
                <MudIcon Icon="@Icons.Material.Filled.MusicNote" Size="Size.Small" Color="Color.Default"/>
            </div>
            <div class="ml-2 pt-2">
                @PlayerJingleFile.FileName
            </div>
            <div class="ml-6 mr-4" @onclick="() => DeleteJingle()">
                <MudIcon Icon="@Icons.Material.Filled.Cancel" Size="Size.Large" Color="Color.Error"/>
            </div>     
        </div>
        <div class="flex flex-row mt-2">
            <div>
                <audio src="@PlayerJingleFile.StoragePath" controls/>
            </div>      
        </div>
    </div>
}

@code{
    [Parameter]
    public Guid PlayerId { get; set; }

    private PlayerFileEntity? PlayerJingleFile {get;set;}

    protected override async Task OnInitializedAsync() {
        await LoadPlayerFile();
    }

    private async Task LoadPlayerFile(){
        PlayerJingleFile = await PlayerFileRepo.GetPlayerJingle(PlayerId);
    }

    private async Task UploadJingle(IBrowserFile? file){
        if(file == null)
            return;

        try{
            await JingleFileService.UploadJingleFile(PlayerId, file);
            await LoadPlayerFile();
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }catch(Exception){
            Snackbar.Add("Weird unexpected error occured", Severity.Error);
        }
    }

    private async Task DeleteJingle(){
        if(PlayerJingleFile == null)
            return;

        try{
            await JingleFileService.ClearPlayerJingle(PlayerId);
            PlayerJingleFile = null;
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }catch(Exception){
            Snackbar.Add("Weird unexpected error occured", Severity.Error);
        }        
    }
}    


