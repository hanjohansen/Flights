@using Domain.Entities.Game

<div class="text-slate-700 h-[135px]">
    @if(Controls.CurrentTournament.Type == GameType.X01){
        <div class="text-6xl font-bold">
            @Controls.CurrentTournament.X01Target
        </div>
        <div class="flex flex-row">
            <div class="mt-1 mr-1">
                <MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowDown" Size="Size.Medium" Color="Color.Default"/>  
            </div>                                                       
            <div class="text-2xl">
                @GetModifierString(Controls.CurrentTournament.InModifier)
            </div> 
        </div>   
        <div class="flex flex-row">
            <div class="mt-1 mr-1">
                <MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowUp" Size="Size.Medium" Color="Color.Default"/>  
            </div>                                                       
            <div class="text-2xl">
                @GetModifierString(Controls.CurrentTournament.OutModifier)
            </div> 
        </div>   
    }
    @if(Controls.CurrentTournament.Type == GameType.CtCricket){
        <div class="text-2xl font-bold">
            Cut-Throat
        </div>
    }
    @if(Controls.CurrentTournament.Type == GameType.CtCricket 
        || Controls.CurrentTournament.Type == GameType.Cricket){
        <div class="text-6xl font-bold">
            Cricket
        </div>
    }
    @if(Controls.CurrentTournament.Type == GameType.AroundTheClock){
        <div class="text-6xl font-bold">
            Around
        </div>
        <div class="text-3xl font-bold">
            the Clock
        </div>
    }


</div>

@code{
    [CascadingParameter]
    public required TournamentControls Controls {get;set;}

    private string GetModifierString(InOutModifier modifier){
        switch(modifier){
            case InOutModifier.None:
                return "-";
            case InOutModifier.Double:
                return "Double";
            case InOutModifier.Triple:
                return "Triple";
            case InOutModifier.FullBull:
                return "Bullseye";
            default:
                return "?";
        }
    }
}    
