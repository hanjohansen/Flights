@page "/viewer"

@using Flights.Client.Rtc
@using Flights.Client.Shared.Game
@using Flights.Domain.Exception
@using Flights.Infrastructure.Port
@using Flights.Client.Shared.Tournament

@inject ISnackbar Snackbar
@inject IGameRepository GameRepo;
@inject ITournamentRepository TournamentRepo;

@inherits RtcHubComponent

<div>
    @if (GameControls != null)
    {
        <CascadingValue Value="@GameControls">
            <GameBaseComponent/>
        </CascadingValue>
    }
    @if (TournamentControls != null)
    {
        <CascadingValue Value="@TournamentControls">
            <TournamentBaseComponent/>
        </CascadingValue>
    }
    @if(GameControls == null && TournamentControls == null){
        <div class="">
            <div class="text-gray-600 font-bold text-4xl text-center mt-[340px]">
                Waiting for game or tournament
            </div>
            <div class="mx-[400px] mt-4">
                <MudProgressLinear Color="Color.Default" Size="Size.Small" Indeterminate="true"/>
            </div>

        </div>

    }
</div>

@code{
    
    private GameControls? GameControls { get; set; }
    
    private TournamentControls? TournamentControls { get; set; }
    
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        EventClient.GameEventReceived += HandleUiEvent;
    }

    private async Task HandleUiEvent(RtcUiMessage message)
    {
        GameControls = null;
        TournamentControls = null;
        
        switch (message.Type)
        {
            case UiEventType.LoadedGame:
            case UiEventType.UpdatedGame:
                await ReloadGame(message.Id);
                break;
            case UiEventType.LoadedTournament:
            case UiEventType.UpdatedTournament:
                await ReloadTournament(message.Id);
                break;
            case UiEventType.LoadedIndex:
                break; //everything nullified..
            default:
                throw new ArgumentOutOfRangeException();
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task ReloadGame(Guid gameId)
    {
        try
        {
            var model = await GameRepo.GetGame(gameId);
            var currentGame = model.SolveGameState();

            GameControls = new GameControls
            {
                CurrentGame = currentGame,
                DisplayType = DisplayType.Viewer,
                ReportScore = null,
                ReportNullDart = null,
            };
        }
        catch (FlightsGameException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    
    private async Task ReloadTournament(Guid tournamentId)
    {
        try
        {
            var model = await TournamentRepo.GetTournament(tournamentId);
            var currentTournament = model.ResolveTournamentState();

            TournamentControls = new TournamentControls
            {
                CurrentTournament = currentTournament,
                DisplayType = DisplayType.Viewer,
                DevFinishGame = null,
                SkipLosersCup = null,
                SwitchPlayerOrder = null,
                AddPlayerToGame = null
            };
        }
        catch (FlightsGameException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}