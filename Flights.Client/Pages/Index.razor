@page "/"
@page "/games"
@using Flights.Client.Rtc
@using Flights.Infrastructure.Port
@using Flights.Client.Shared.Toolkit
@using Flights.Client.Shared.Games
@using Flights.Domain.ReadModels

@inject NavigationManager NavigationManager
@inject IGameRepository GamesRepo

@inherits RtcHubComponent

<PageTitle>Flights</PageTitle>

<div class="flex flex-row justify-center mt-4 overflow-hidden">
    <div class="flex flex-col mr-8">        
        <BigRoundButton OnClick="@GoToCreateGame">
            <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Style="@($"color:{Colors.Gray.Lighten5};")"></MudIcon>
        </BigRoundButton>
        <div class="pt-4">
            <BigRoundButton OnClick="@GoToPlayers">
                <MudIcon Icon="@Icons.Material.Filled.Group" Size="Size.Large" Style="@($"color:{Colors.Gray.Lighten5};")"></MudIcon>
            </BigRoundButton>
        </div>
        <div class="pt-4">
            <BigRoundButton OnClick="@GoToViewer">
                <MudIcon Icon="@Icons.Material.Filled.Monitor" Size="Size.Large" Style="@($"color:{Colors.Gray.Lighten5};")"></MudIcon>
            </BigRoundButton>
        </div>
        <div class="pt-4">
            <BigRoundButton OnClick="@GoToStats">
                <MudIcon Icon="@Icons.Material.Filled.InsertChartOutlined" Size="Size.Large" Style="@($"color:{Colors.Gray.Lighten5};")"></MudIcon>
            </BigRoundButton>
        </div>
    </div>
    <div class="h-[710px] overflow-y-auto pr-6">
        @if (Games.Any())
        {   
            foreach (var game in Games)
            {
                <div>
                    <GameItem Game="@game" ReportGameDeleted="@ReloadGames"/>
                </div>
            }
        }
        else
        {
            <MudPaper>
                <div class="p-4 text-4xl">
                    No games present
                </div>
            </MudPaper>
        }
    </div>
</div>

@code{

    private List<GameListItemReadModel> Games { get; set; } = new();
    
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
        await ReloadGames();
        
        await Broadcast(UiEventType.LoadedIndex, Guid.Empty);
    }

    private async Task ReloadGames()
    {
        var games = await GamesRepo.GetGames();
        Games = games.Take(20).ToList();
    }

    private void GoToPlayers()
    {
        NavigationManager.NavigateTo("/players");
    }

    private void GoToCreateGame()
    {
        NavigationManager.NavigateTo("/creategame");
    }

    private void GoToViewer()
    {
        NavigationManager.NavigateTo("/viewer");
    }

    private void GoToStats()
    {
        NavigationManager.NavigateTo("/stats");
    }
}

