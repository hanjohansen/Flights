@page "/tournament/{TournamentId:guid}"

@using Flights.Client.Rtc
@using Flights.Client.Shared.Game
@using Flights.Client.Shared.Tournament
@using Flights.Domain.Exception
@using Flights.Infrastructure.Port

@inject ITournamentRepository TournamentRepo
@inject ISnackbar Snackbar

@inherits RtcHubComponent

<div>
    @if (Controls != null)
    {
        <CascadingValue Value="@Controls">
            <TournamentBaseComponent/>
        </CascadingValue>
    }
</div>

@code{

    [Parameter] 
    public Guid TournamentId { get; set; }
    
    private TournamentControls? Controls { get; set; }
    
    protected override async Task OnInitializedAsync() 
    {
        await base.OnInitializedAsync();
        
        var model = await TournamentRepo.GetTournament(TournamentId);
        var currentTournament = model.ResolveTournamentState();

        Controls = new TournamentControls
        {
            DisplayType = DisplayType.Normal,
            CurrentTournament = currentTournament,
            DevFinishGame = DevFinishGame,
            SkipLosersCup = SkipLosersCup,
            SwitchPlayerOrder = SwitchPlayerOrder
        };
        
        await Broadcast(UiEventType.LoadedTournament, TournamentId);
    }

    private async Task DevFinishGame(Guid gameId)
    {
        if (Controls?.CurrentTournament == null)
            return;
        
        try
        {
            var newState = await TournamentRepo.DevFinishGame(Controls.CurrentTournament.Id, gameId);
            Controls.CurrentTournament = newState;
            await InvokeAsync(StateHasChanged);
            
            await Broadcast(UiEventType.UpdatedTournament, TournamentId);
        }
        catch (FlightsGameException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add("unknown error:" + e.Message, Severity.Error);
        }
    }
    
    private async Task SwitchPlayerOrder(Guid gameId)
    {
        if (Controls?.CurrentTournament == null)
            return;
        
        try
        {
            var newState = await TournamentRepo.SwitchPlayerOrder(Controls.CurrentTournament.Id, gameId);
            Controls.CurrentTournament = newState;
            await InvokeAsync(StateHasChanged);
            
            await Broadcast(UiEventType.UpdatedTournament, TournamentId);
        }
        catch (FlightsGameException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add("unknown error:" + e.Message, Severity.Error);
        }
    }

    private async Task SkipLosersCup()
    {
        if (Controls?.CurrentTournament == null)
            return;
        
        try
        {
            var newState = await TournamentRepo.SkipLosersCup(Controls.CurrentTournament.Id);
            Controls.CurrentTournament = newState;
            await InvokeAsync(StateHasChanged);
            
            await Broadcast(UiEventType.UpdatedTournament, TournamentId);
        }
        catch (FlightsGameException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add("unknown error:" + e.Message, Severity.Error);
        }
    }
}