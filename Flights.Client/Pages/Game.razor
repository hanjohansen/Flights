@page "/game/{GameId:guid}"

@using Flights.Domain.Exception
@using Flights.Domain.Models
@using Flights.Domain.State
@using Flights.Infrastructure.Port
@using Flights.Client.Shared.Game
@using Flights.Domain.Entities.Game
@using Flights.Client.Rtc

@inject ISnackbar Snackbar
@inject IGameRepository GameRepo

@inherits RtcHubComponent

<div>
    <CascadingValue Value="@TournamentId">
        @if (CurrentGame != null)
        {
            <GameBaseComponent CurrentGame="@CurrentGame"
                               ReportScore="@ReportScore"
                               ReportMiss="@ReportNullDart"
                               RevertDart="@RequestRevertDart"/>
        }
        <JinglePlayer @ref="_jinglePlayer" GameId="@GameId"/>
    </CascadingValue>
</div>

@code{

    [Parameter]
    public Guid GameId { get; set; }
    
    private Guid? TournamentId { get; set; }

    private JinglePlayer? _jinglePlayer;

    private GameState? CurrentGame {get;set;}
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        var model = await GameRepo.GetGame(GameId);
        CurrentGame = model.SolveGameState();
        TournamentId = CurrentGame.TournamentId;

        await Broadcast(UiEventType.LoadedGame, CurrentGame.Id);
    }

    private async Task ReportScore(StatModel model){
        if(CurrentGame?.CurrentPlayerId == null)
            return;

        try
        {
            var currPlayerId = CurrentGame.CurrentPlayerId!.Value;
            var oldState = CurrentGame;
            
            CurrentGame = await GameRepo.AddPlayerStat(GameId, currPlayerId, model);

            if (model.Value == 26 && currPlayerId == CurrentGame.CurrentPlayerId)
            {
                CurrentGame = await GameRepo.AddPlayerStat(GameId, currPlayerId, StatModel.Init(0));
                CurrentGame = await GameRepo.AddPlayerStat(GameId, currPlayerId, StatModel.Init(0));
            }
            
            await Broadcast(UiEventType.UpdatedGame, CurrentGame?.Id);

            await ValidatePlayJingle(oldState, CurrentGame!, currPlayerId);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }              
    }

    private async Task ReportNullDart(){
        if(CurrentGame?.CurrentPlayerId == null)
            return;

        var currentPlayer = CurrentGame.PlayerStates.First(x => x.PlayerId == CurrentGame.CurrentPlayerId);
        var remainingDarts = currentPlayer.Darts?.RemainingDarts() ?? 3;

        try
        {
            for(var i = remainingDarts; i > 0; i--)
                CurrentGame = await GameRepo.AddPlayerStat(GameId, currentPlayer.PlayerId, StatModel.Init(0));
            
            await Broadcast(UiEventType.UpdatedGame, CurrentGame?.Id);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task RequestRevertDart(){
        if(CurrentGame?.Finished == true)
            return;

        try{
            CurrentGame = await GameRepo.RevertLastDart(GameId);
            await Broadcast(UiEventType.UpdatedGame, CurrentGame?.Id);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }            
    }

    private async Task ValidatePlayJingle(GameState oldState, GameState newState, Guid? playerId)
    {
        if (playerId == null)
            return;

        if (oldState is { Type: GameType.AroundTheClock, Finished: false } && newState.Finished)
        {
            var firstPlayer = newState.PlayerStates.FirstOrDefault(x => x.Rank == 1);
            if(firstPlayer != null)
                await _jinglePlayer!.PlayJingle(firstPlayer.PlayerId);

            return;
        }

        var oldRank = oldState.PlayerStates.First(x => x.PlayerId == playerId).Rank;
        var newRank = newState.PlayerStates.First(x => x.PlayerId == playerId).Rank;
        
        if(oldRank == null && newRank != null)
            await _jinglePlayer!.PlayJingle(playerId.Value);
    }
}
