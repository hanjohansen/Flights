@page "/game/{GameId:guid}"

@using Flights.Domain.Exception
@using Flights.Domain.Models
@using Flights.Domain.State
@using Flights.Infrastructure.Port
@using Flights.Client.Shared.Game
@using Flights.Domain.Entities.Game
@using Flights.Client.Rtc

@inject ISnackbar Snackbar
@inject IGameRepository GameRepo

@inherits RtcHubComponent

<div>
    @if (Controls != null)
    {
        <CascadingValue Value="@Controls">
            <GameBaseComponent/>
            <JinglePlayer @ref="_jinglePlayer" GameId="@GameId"/>
        </CascadingValue>
    }
</div>

@code{

    [Parameter]
    public Guid GameId { get; set; }

    private GameControls? Controls {get;set;}

    private JinglePlayer? _jinglePlayer;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        var model = await GameRepo.GetGame(GameId);
        var currentGame = model.SolveGameState();

        Controls = new GameControls()
        {
            DisplayType = DisplayType.Normal,
            CurrentGame = currentGame,
            ReportScore = ReportScore,
            ReportNullDart = ReportNullDart,
            RequestRevertDart = RequestRevertDart
        };

        await Broadcast(UiEventType.LoadedGame, Controls.CurrentGame.Id);
    }

    private async Task ReportScore(StatModel model){
        if(Controls?.CurrentGame.CurrentPlayerId == null)
            return;

        try
        {
            var currentGame = Controls.CurrentGame;
            var currPlayerId = currentGame.CurrentPlayerId!.Value;
            var oldState = currentGame;
            
            currentGame = await GameRepo.AddPlayerStat(GameId, currPlayerId, model);

            if (model.Value == 26 && currPlayerId == Controls.CurrentGame.CurrentPlayerId)
            {
                await GameRepo.AddPlayerStat(GameId, currPlayerId, StatModel.Init(0));
                currentGame = await GameRepo.AddPlayerStat(GameId, currPlayerId, StatModel.Init(0));
            }

            Controls.CurrentGame = currentGame;
            await InvokeAsync(StateHasChanged);
            
            await Broadcast(UiEventType.UpdatedGame, currentGame.Id);
            await ValidatePlayJingle(oldState, currentGame, currPlayerId);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }              
    }

    private async Task ReportNullDart(){
        if(Controls?.CurrentGame.CurrentPlayerId == null)
            return;

        var currentGame = Controls.CurrentGame;
        var currentPlayer = currentGame.PlayerStates.First(x => x.PlayerId == currentGame.CurrentPlayerId);
        var remainingDarts = currentPlayer.Darts?.RemainingDarts() ?? 3;

        try
        {
            for(var i = remainingDarts; i > 0; i--)
                currentGame = await GameRepo.AddPlayerStat(GameId, currentPlayer.PlayerId, StatModel.Init(0));

            Controls.CurrentGame = currentGame;
            await InvokeAsync(StateHasChanged);
            
            await Broadcast(UiEventType.UpdatedGame, currentGame.Id);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task RequestRevertDart(){
        if(Controls?.CurrentGame.Finished == true || Controls == null)
            return;

        try{
            Controls.CurrentGame = await GameRepo.RevertLastDart(GameId);
            await InvokeAsync(StateHasChanged);
            await Broadcast(UiEventType.UpdatedGame, Controls.CurrentGame.Id);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }            
    }

    private async Task ValidatePlayJingle(GameState oldState, GameState newState, Guid? playerId)
    {
        if (playerId == null)
            return;

        if (oldState is { Type: GameType.AroundTheClock, Finished: false } && newState.Finished)
        {
            var firstPlayer = newState.PlayerStates.FirstOrDefault(x => x.Rank == 1);
            if(firstPlayer != null)
                await _jinglePlayer!.PlayJingle(firstPlayer.PlayerId);

            return;
        }

        var oldRank = oldState.PlayerStates.First(x => x.PlayerId == playerId).Rank;
        var newRank = newState.PlayerStates.First(x => x.PlayerId == playerId).Rank;
        
        if(oldRank == null && newRank != null)
            await _jinglePlayer!.PlayJingle(playerId.Value);
    }
}
