@page "/game/{GameId:guid}"

@using Flights.Client.Shared.Game
@using Flights.Client.Shared.Game.Cricket
@using Flights.Client.Shared.Game.Shanghai
@using Flights.Client.Shared.Game.X01
@using Flights.Domain.Entities
@using Flights.Domain.Exceptions
@using Flights.Domain.Models
@using Flights.Domain.State
@using Flights.Infrastructure.Port

@inject ISnackbar Snackbar
@inject IGameRepository GameRepo
@inject IJSRuntime JSRuntime

@if(CurrentGame != null){
    switch(CurrentGame.Type){
        case GameType.X01:
            <X01Game CurrentGame="@CurrentGame" 
                ReportScore="@ReportScore"
                ReportMiss="@ReportNullDart"
                RevertDart="@RequestRevertDart"/>
            break;
        case GameType.Cricket:
        case GameType.CtCricket:
            <CricketGame CurrentGame="@CurrentGame" 
                ReportScore="@ReportScore"
                ReportMiss="@ReportNullDart"
                RevertDart="@RequestRevertDart"/>
            break;
        case GameType.Shanghai:
            <ShanghaiGame CurrentGame="@CurrentGame" 
                ReportScore="@ReportScore"
                ReportMiss="@ReportNullDart"
                RevertDart="@RequestRevertDart"/>
            break;
        default:
            <div>
                Nothing
            </div>
            break;
    }
}

@code{

    [Parameter]
    public Guid GameId { get; set; }

    private GameState? CurrentGame {get;set;} = null!;
    protected override async Task OnInitializedAsync() {
        var model = await GameRepo.GetGame(GameId);
        CurrentGame = model.SolveGameState();
    }

    private async Task ReportScore(StatModel model){
        if(CurrentGame?.CurrentPlayerId == null)
            return;

        try{
            CurrentGame = await GameRepo.AddPlayerStat(GameId, CurrentGame.CurrentPlayerId!.Value, model);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }              
    }

    private async Task ReportNullDart(){
        if(CurrentGame?.CurrentPlayerId == null)
            return;

        var currentPlayer = CurrentGame.PlayerStates.First(x => x.PlayerId == CurrentGame.CurrentPlayerId);

        if(currentPlayer == null)
            return;

        var remainingDarts = currentPlayer.Darts?.RemainingDarts() ?? 3;

        for(int i = remainingDarts; i > 0; i--)
            await ReportScore(StatModel.Init(0));
    }

    private async Task RequestRevertDart(){
        if(CurrentGame?.Finished == true)
            return;

        try{
            CurrentGame = await GameRepo.RevertLastDart(GameId);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }            
    }

    protected override async Task OnAfterRenderAsync(bool firstRender){
        var id = CurrentGame?.CurrentPlayerId;

        if(id == null)
            return;

        await JSRuntime.InvokeVoidAsync("scrollToControl", id.ToString());
    }
}
