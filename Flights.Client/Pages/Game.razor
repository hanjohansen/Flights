@page "/game/{GameId:guid}"

@using Flights.Client.Shared.Game
@using Flights.Domain.Exceptions
@using Flights.Domain.Models
@using Flights.Domain.State
@using Flights.Infrastructure.Port
@using System.Diagnostics

@inject ISnackbar Snackbar
@inject IGameRepository GameRepo


<div class="flex flex-row mx-1">
    <div class="flex flex-column flex-auto mr-1">
        @foreach(var stat in CurrentGame.PlayerStates){
            <PlayerStats Player="@stat" CurrentPlayerId="@CurrentGame.CurrentPlayerId"/>
        }
    </div>
    <div class="flex-shrink">
        <ScoreButtonBoard ReportDart="@ReportScore" RequestRevertDart="@RequestRevertDart"/>
    </div>
</div>

@code{

    [Parameter]
    public Guid GameId { get; set; }

    private GameState CurrentGame {get;set;} = null!;
    protected override async Task OnInitializedAsync() {
        Debug.WriteLine("reloading Game");
        var model = await GameRepo.GetGame(GameId);
        CurrentGame = model.SolveGameState();
    }

    private async Task ReportScore(StatModel model){
        if(CurrentGame.CurrentPlayerId == null)
            return;

        try{
            CurrentGame = await GameRepo.AddPlayerStat(GameId, CurrentGame.CurrentPlayerId!.Value, model);     
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }              
    }

    private async Task RequestRevertDart(){
        if(CurrentGame.Finished)
            return;

        try{
            CurrentGame = await GameRepo.RevertLastDart(GameId);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }            
    }
}
