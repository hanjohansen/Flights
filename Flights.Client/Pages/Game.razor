@page "/game/{GameId:guid}"

@using Flights.Client.Shared.Game.Cricket
@using Flights.Client.Shared.Game.Shanghai
@using Flights.Client.Shared.Game.X01
@using Flights.Domain.Entities
@using Flights.Domain.Exception
@using Flights.Domain.Models
@using Flights.Domain.State
@using Flights.Infrastructure.Port
@using Flights.Client.Shared.Game

@inject ISnackbar Snackbar
@inject IGameRepository GameRepo
@inject IJSRuntime JsRuntime

<div>
    @if(CurrentGame != null){
        switch(CurrentGame.Type){
            case GameType.X01:
                <X01Game CurrentGame="@CurrentGame" 
                    ReportScore="@ReportScore"
                    ReportMiss="@ReportNullDart"
                    RevertDart="@RequestRevertDart"/>
                break;
            case GameType.Cricket:
            case GameType.CtCricket:
                <CricketGame CurrentGame="@CurrentGame" 
                    ReportScore="@ReportScore"
                    ReportMiss="@ReportNullDart"
                    RevertDart="@RequestRevertDart"/>
                break;
            case GameType.Shanghai:
                <ShanghaiGame CurrentGame="@CurrentGame" 
                    ReportScore="@ReportScore"
                    ReportMiss="@ReportNullDart"
                    RevertDart="@RequestRevertDart"/>
                break;
            default:
                <div>
                    Nothing
                </div>
                break;
        }
    }
    <JinglePlayer @ref="_jinglePlayer" GameId="@GameId"/>
</div>

@code{

    [Parameter]
    public Guid GameId { get; set; }

    private JinglePlayer? _jinglePlayer;

    private GameState? CurrentGame {get;set;}
    protected override async Task OnInitializedAsync() {
        var model = await GameRepo.GetGame(GameId);
        CurrentGame = model.SolveGameState();
    }

    private async Task ReportScore(StatModel model){
        if(CurrentGame?.CurrentPlayerId == null)
            return;

        try
        {
            var currPlayerId = CurrentGame.CurrentPlayerId!.Value;
            
            CurrentGame = await GameRepo.AddPlayerStat(GameId, currPlayerId, model);
            
            //todo: identify when to play jingle
            if (model.Value != 0 && _jinglePlayer != null)
                await _jinglePlayer.PlayJingle(currPlayerId);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }              
    }

    private async Task ReportNullDart(){
        if(CurrentGame?.CurrentPlayerId == null)
            return;

        var currentPlayer = CurrentGame.PlayerStates.First(x => x.PlayerId == CurrentGame.CurrentPlayerId);

        var remainingDarts = currentPlayer.Darts?.RemainingDarts() ?? 3;

        for(var i = remainingDarts; i > 0; i--)
            await ReportScore(StatModel.Init(0));
    }

    private async Task RequestRevertDart(){
        if(CurrentGame?.Finished == true)
            return;

        try{
            CurrentGame = await GameRepo.RevertLastDart(GameId);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }            
    }

    protected override async Task OnAfterRenderAsync(bool firstRender){
        var id = CurrentGame?.CurrentPlayerId;

        if(id == null)
            return;

        await JsRuntime.InvokeVoidAsync("scrollToControl", id.ToString());
    }
}
