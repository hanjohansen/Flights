@page "/game/{GameId:guid}"

@using Flights.Client.Shared.Game.Cricket
@using Flights.Client.Shared.Game.X01
@using Flights.Domain.Exception
@using Flights.Domain.Models
@using Flights.Domain.State
@using Flights.Infrastructure.Port
@using Flights.Client.Shared.Game
@using Flights.Client.Shared.Game.AroundTheClock
@using Flights.Domain.Entities.Game
@using Flights.Client.Rtc

@inject ISnackbar Snackbar
@inject IGameRepository GameRepo
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<div>
    <CascadingValue Value="@TournamentId">
    @if (CurrentGame != null)
    {
        switch (CurrentGame.Type)
        {
            case GameType.X01:
                <X01Game CurrentGame="@CurrentGame"
                         ReportScore="@ReportScore"
                         ReportMiss="@ReportNullDart"
                         RevertDart="@RequestRevertDart"/>
                break;
            case GameType.Cricket:
            case GameType.CtCricket:
                <CricketGame CurrentGame="@CurrentGame"
                             ReportScore="@ReportScore"
                             ReportMiss="@ReportNullDart"
                             RevertDart="@RequestRevertDart"/>
                break;
            case GameType.AroundTheClock:
                <AroundTheClockGame CurrentGame="@CurrentGame"
                                    ReportScore="@ReportScore"
                                    ReportMiss="@ReportNullDart"
                                    RevertDart="@RequestRevertDart"/>
                break;
            default:
                <div>
                    Nothing
                </div>
                break;
        }
    }
    <JinglePlayer @ref="_jinglePlayer" GameId="@GameId"/>
    </CascadingValue>
</div>

@code{

    [Parameter]
    public Guid GameId { get; set; }
    
    public Guid? TournamentId { get; set; }

    private JinglePlayer? _jinglePlayer;

    private GameState? CurrentGame {get;set;}
    
    private readonly ViewerHubClient _viewerHubClient = new ();
    
    protected override async Task OnInitializedAsync()
    {
        var baseUrl = NavigationManager.BaseUri;
        await _viewerHubClient.Connect(baseUrl);
        
        var model = await GameRepo.GetGame(GameId);
        CurrentGame = model.SolveGameState();
        TournamentId = CurrentGame.TournamentId;

        await Broadcast(ViewerHubMessageType.LoadedGame, CurrentGame.Id);
    }
    
    private async Task Broadcast(ViewerHubMessageType messageType, Guid? id)
    {
        if (id != null)
        {
            await _viewerHubClient.PublishGameEvent(messageType, id.Value);
        }
    }

    private async Task ReportScore(StatModel model){
        if(CurrentGame?.CurrentPlayerId == null)
            return;

        try
        {
            var currPlayerId = CurrentGame.CurrentPlayerId!.Value;
            var oldState = CurrentGame;
            
            CurrentGame = await GameRepo.AddPlayerStat(GameId, currPlayerId, model);
            await Broadcast(ViewerHubMessageType.UpdatedGame, CurrentGame?.Id);

            await ValidatePlayJingle(oldState, CurrentGame, currPlayerId);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }              
    }

    private async Task ReportNullDart(){
        if(CurrentGame?.CurrentPlayerId == null)
            return;

        var currentPlayer = CurrentGame.PlayerStates.First(x => x.PlayerId == CurrentGame.CurrentPlayerId);
        var remainingDarts = currentPlayer.Darts?.RemainingDarts() ?? 3;

        try
        {
            for(var i = remainingDarts; i > 0; i--)
                CurrentGame = await GameRepo.AddPlayerStat(GameId, currentPlayer.PlayerId, StatModel.Init(0));
            
            await Broadcast(ViewerHubMessageType.UpdatedGame, CurrentGame?.Id);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task RequestRevertDart(){
        if(CurrentGame?.Finished == true)
            return;

        try{
            CurrentGame = await GameRepo.RevertLastDart(GameId);
            await Broadcast(ViewerHubMessageType.UpdatedGame, CurrentGame?.Id);
        }catch(FlightsGameException ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }            
    }

    protected override async Task OnAfterRenderAsync(bool firstRender){
        var id = CurrentGame?.CurrentPlayerId;

        if(id == null)
            return;

        await JsRuntime.InvokeVoidAsync("scrollToControl", id.ToString());
    }

    private async Task ValidatePlayJingle(GameState oldState, GameState newState, Guid? playerId)
    {
        if (playerId == null)
            return;

        if (oldState is { Type: GameType.AroundTheClock, Finished: false } && newState.Finished)
        {
            var firstPlayer = newState.PlayerStates.FirstOrDefault(x => x.Rank == 1);
            if(firstPlayer != null)
                await _jinglePlayer!.PlayJingle(firstPlayer.PlayerId);

            return;
        }

        var oldRank = oldState.PlayerStates.First(x => x.PlayerId == playerId).Rank;
        var newRank = newState.PlayerStates.First(x => x.PlayerId == playerId).Rank;
        
        if(oldRank == null && newRank != null)
            await _jinglePlayer!.PlayJingle(playerId.Value);
    }

    public async ValueTask DisposeAsync()
    {
        await _viewerHubClient.DisposeAsync();
    }

}
