@page "/player/{PlayerId:guid}"
@using Flights.Client.Shared.Player
@using Flights.Client.Shared.Toolkit
@using Flights.Domain.Entities
@using Flights.Infrastructure.Port

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IPlayerRepository PlayerRepo
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>@PlayerEntity?.Name</PageTitle>

<div class="flex flex-row justify-center mt-4">
    <div class="flex flex-col mr-8">      
        <div class="mb-4">
            <BigRoundButton OnClick="@GoToPlayers" Type="BigRoundButton.ButtonType.Secondary  ">
                <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Size="Size.Large" Style="@($"color:{Colors.Gray.Lighten5};")"></MudIcon>
            </BigRoundButton>
        </div>
    </div>
    <div class="rounded-lg border-gray-300 bg-white mud-elevation-3 w-[450px] p-2">
        @if(!IsEditing){
            <div class="flex flex-row ml-4 mt-2 prevent-select">
                <div class="flex flex-grow text-4xl text-gray-600">
                    @PlayerEntity?.Name
                </div>
                <div class="ml-8" @onclick="() => DoEditing()">
                    <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Large" Color="Color.Default"/>
                </div>
                <div class="ml-6 mr-4" @onclick="() => HandleDelete()">
                    <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Size="Size.Large" Color="Color.Error"/>
                </div>
            </div>
        }else{
            <div class="flex flex-row">
                <div class="flex-grow mb-3 pt-0">
                    <input id="name-input" type="text" value="@EditName" @onchange="@((e) => EditNameChanging(e))" placeholder="Name" class="px-3 py-4 placeholder-blueGray-300 text-blueGray-600 relative bg-white rounded text-2xl border-0 shadow outline-none focus:outline-none focus:ring w-full"/>
                </div>
                <div class="ml-4 mt-4" @onclick="() => SaveEditing()">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" Color="Color.Success"/>
                </div>
                <div class="ml-6 mr-4 mt-4" @onclick="() => EndEditing()">
                    <MudIcon Icon="@Icons.Material.Filled.Cancel" Size="Size.Large" Color="Color.Error"/>
                </div>
            </div>   
        }    
    </div>
</div>

@code{

    [Parameter]
    public Guid PlayerId { get; set; }

    private PlayerEntity? PlayerEntity {get;set;} = null!;

    private bool IsEditing {get;set;}
    private string EditName {get;set;} = string.Empty;

    protected override async Task OnInitializedAsync() {
        PlayerEntity = await PlayerRepo.GetPlayer(PlayerId);
    }

    private void GoToPlayers()
    {
        NavigationManager.NavigateTo("/players");
    }

    private void EditNameChanging(ChangeEventArgs args){
        EditName = args.Value?.ToString() ?? string.Empty;
    }
    private async Task DoEditing(){
        EditName = PlayerEntity?.Name ?? string.Empty;
        IsEditing = true;
        await Task.Delay(100);
        await FocusNameInput();
    }

    private void EndEditing(){
        IsEditing = false;
        EditName = string.Empty;
    }

    public async Task SaveEditing(){
        try{
            PlayerEntity = await PlayerRepo.UpdatePlayer(PlayerEntity?.Id ?? Guid.NewGuid(), EditName);
            EndEditing();
        }catch(Exception ex){
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task HandleDelete(){
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<DeletePlayerDialog>("Delete player", options);
        var result = await dialog.Result;

        if(!result?.Canceled ?? false){
            await PlayerRepo.DeletePlayer(PlayerId);
            Snackbar.Add("Player deleted", Severity.Success);
            GoToPlayers();
        }
    }

    public async Task FocusNameInput()
    {
        await JSRuntime.InvokeVoidAsync("focusElement", "name-input");
    }
}